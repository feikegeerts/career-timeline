name: Deploy AWS Infrastructure

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'infrastructure/cloudformation/**'
      - '.github/workflows/deploy-infrastructure.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          # Try to validate template before deployment
          echo "Validating CloudFormation template..."
          aws cloudformation validate-template \
            --template-body file://infrastructure/cloudformation/career-timeline-api.yaml

          # Check if stack exists
          STACK_EXISTS=0
          aws cloudformation describe-stacks --stack-name career-timeline-api &>/dev/null && STACK_EXISTS=1 || echo "Stack does not exist yet"

          if [ $STACK_EXISTS -eq 0 ]; then
            echo "Creating new stack career-timeline-api..."
            aws cloudformation create-stack \
              --stack-name career-timeline-api \
              --template-body file://infrastructure/cloudformation/career-timeline-api.yaml \
              --parameters \
                ParameterKey=CorsOrigin,ParameterValue=https://feikegeerts.nl \
                ParameterKey=LambdaExecutionRoleArn,ParameterValue=arn:aws:iam::526811500691:role/CareerTimelineDataRole
            
            echo "Waiting for stack creation to complete (this may take several minutes)..."
            aws cloudformation wait stack-create-complete --stack-name career-timeline-api
            
            if [ $? -ne 0 ]; then
              echo "❌ Stack creation failed. Checking events..."
              aws cloudformation describe-stack-events \
                --stack-name career-timeline-api \
                --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].ResourceStatusReason" \
                --output text
              exit 1
            fi
            
            echo "✅ Stack creation completed successfully!"
          else
            echo "Updating existing stack career-timeline-api..."
            set +e
            aws cloudformation update-stack \
              --stack-name career-timeline-api \
              --template-body file://infrastructure/cloudformation/career-timeline-api.yaml \
              --parameters \
                ParameterKey=CorsOrigin,ParameterValue=https://feikegeerts.nl \
                ParameterKey=LambdaExecutionRoleArn,ParameterValue=arn:aws:iam::526811500691:role/CareerTimelineDataRole
            
            UPDATE_RESULT=$?
            set -e
            
            # If there are actual updates to perform
            if [ $UPDATE_RESULT -eq 0 ]; then
              echo "Waiting for stack update to complete (this may take several minutes)..."
              aws cloudformation wait stack-update-complete --stack-name career-timeline-api
              
              if [ $? -ne 0 ]; then
                echo "❌ Stack update failed. Checking events..."
                aws cloudformation describe-stack-events \
                  --stack-name career-timeline-api \
                  --query "StackEvents[?ResourceStatus=='UPDATE_FAILED'].ResourceStatusReason" \
                  --output text
                exit 1
              fi
              
              echo "✅ Stack update completed successfully!"
            else
              echo "No updates were performed (the submitted template was identical to the current template)"
            fi
          fi

          # Get stack outputs
          echo "Retrieving stack outputs..."
          aws cloudformation describe-stacks \
            --stack-name career-timeline-api \
            --query "Stacks[0].Outputs" > stack-outputs.json

          # Extract needed values
          S3_BUCKET=$(cat stack-outputs.json | jq -r '.[] | select(.OutputKey=="S3BucketName") | .OutputValue')
          API_ENDPOINT=$(cat stack-outputs.json | jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue')

          # Set outputs for use in other steps
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Output information
        run: |
          echo "✅ Infrastructure deployment complete!"
          echo "🔗 API Endpoint: ${{ steps.deploy-stack.outputs.api_endpoint }}"
          echo "🗄️ S3 Bucket: ${{ steps.deploy-stack.outputs.s3_bucket }}"
